import './style.scss'
import accessibleAutocomplete from 'accessible-autocomplete'
import { nodeListForEach } from 'govuk-frontend/govuk/common'

const $allAutocompleteElements = document.querySelectorAll('[data-module="app-autocomplete"]')
const showAllValuesOption = component => Boolean(component.getAttribute('data-show-all-values'))
const disableAutoselectOption = component => Boolean(component.getAttribute('data-disable-autoselect'))
const disableConfirmOnBlurOption = component => Boolean(component.getAttribute('data-disable-confirm-on-blur'))
const defaultValueOption = component => component.getAttribute('data-default-value') || ''

const setupAutoComplete = (component) => {
  const selectEl = component.querySelector('select')

  accessibleAutocomplete.enhanceSelectElement({
    defaultValue: defaultValueOption(component),
    selectElement: selectEl,
    showAllValues: showAllValuesOption(component),
    autoselect: !disableAutoselectOption(component),
    confirmOnBlur: !disableConfirmOnBlurOption(component)
  })


  // Because the text input is generated by the accessibleAutocomplete library above, we need to
  // dynamically add some extra attributes
  //
  // We add a name which we base off the name for the select element and add "raw" to it, eg
  // if there is a select input called "course_details[subject]" we add a name to the text input
  // as "course_details[subject_raw]"
  //
  // We also want to preopulate the text input with the value the user entered there last time
  // (if present), to do this there is a data attribute added to the select.
  const matches = /(\w+)\[(\w+)\]/.exec(selectEl.name)
  const group = matches[1]
  const field = matches[2]
  const rawFieldName = `${matches[1]}[${matches[2]}_raw]`
  var textInput = component.querySelector('input');
  textInput.name = rawFieldName;
  textInput.value = selectEl.dataset.textValue
}

nodeListForEach($allAutocompleteElements, setupAutoComplete)
